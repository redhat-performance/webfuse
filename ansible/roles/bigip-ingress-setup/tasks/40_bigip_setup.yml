- name: Create {{ bigip_namespace }} namespace
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ bigip_namespace }}"

- name: Create bridges and network
  include_tasks: 41_bigip_bridge_network.yml

- name: Create data volume for VMs
  include_tasks: 42_bigip_data_volume.yml

- name: Setup BIGIP mgmt VLAN in provisioner
  include_tasks: 43_provisioner_network.yml

- name: Create BIGIP VMs
  include_tasks: 45_bigip_vm.yml

- name: Add all bigip hosts to inventory
  add_host:
    hostname: "{{ item.key }}.{{ bigip_base_domain }}"
    ansible_host: "{{ item.value.mgmt_ip | ipaddr('address') }}"
    license_key: "{{ item.value.license_key }}"
    bigip_user: "{{ bigip_user }}"
    bigip_password: "{{ bigip_password }}"
    bigip_base_domain: "{{ bigip_base_domain }}"
    groups:
      - 'bigip'
  loop: "{{ bigip_vms | dict2items }}"

- name: Generate stablcurco1_dns46.tcl
  template:
    src: stablcurco1_dns46.tcl.j2
    dest: "/tmp/stablcurco1_dns46.tcl"

- name: Generate stablcurco1_nat46.tcl
  copy:
    src: stablcurco1_nat46.tcl
    dest: "/tmp/stablcurco1_nat46.tcl"

- block:
  - name: detect python interpreter
    shell: |
      /usr/bin/python --version
    register: python_version
    ignore_errors: true
    delegate_to: localhost

  - name: set python version
    shell: |
      {{ (python_version.stderr_lines|length > 0 and 'Python' in python_version.stderr) | ternary('/usr/bin/python', '/usr/libexec/platform-python') }} --version | awk '{print $2}'
    register: python_version
    become: true
    delegate_to: localhost

  - name: Install required packages
    yum:
      name: "patch"
      state: present
      update_cache: true
      disable_gpg_check: yes
    become: true
    delegate_to: localhost

  - name: install galaxy module
    shell: "ansible-galaxy collection install ansible.posix"
    become: true
    delegate_to: localhost

  - name: Patch ansible module
    patch:
      src:  "{{ role_path }}/files/bigip_device_license-{{ python_version.stdout.split('.')[0] }}.{{ python_version.stdout.split('.')[1] }}.patch"
      dest: "/usr/lib/python{{ python_version.stdout.split('.')[0] }}.{{ python_version.stdout.split('.')[1] }}/site-packages/ansible/modules/network/f5/bigip_device_license.py"
    become: true
    delegate_to: localhost
  when:
    - bigip_module_patch | default(true) | bool

# - name: Set MCP {{ bigip_worker_mcp }} MaxUnavailable to default 1
#   shell: |
#     oc patch mcp {{ bigip_worker_mcp }} --type='merge' --patch="{\"spec\":{\"maxUnavailable\": 1 }}"
