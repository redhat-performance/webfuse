---
# rhacm-hub-icsp tasks

- name: Create directory for rhacm deployment
  file:
    path: "{{ rhacm_install_directory }}/rhacm-deploy"
    state: directory

- name: Create ImageContentSourcePolicy on hub cluster
  template:
    src: icsp.yaml.j2
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/icsp.yml"

- name: Check if icsp exists
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get ImageContentSourcePolicy rhacm-repo
  ignore_errors: true
  register: icsp_exists

- name: Apply ImageContentSourcePolicy to hub cluster
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc apply -f "{{ rhacm_install_directory }}/rhacm-deploy/icsp.yml"
  when: icsp_exists.rc == 1

- name: Determine if we enable worker mcp
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get mcp worker --no-headers -o custom-columns=COUNT:.status.machineCount
  register: enable_worker_mcp_count

- name: Wait until MachineConfigPools are updating
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get mcp --no-headers {{ item.mcp }} | awk '{print $4}'
  register: result
  delay: 5
  retries: 30
  until: result.stdout == "True"
  with_items:
  - mcp: master
  - mcp: worker
    enabled: "{{ enable_worker_mcp_count.stdout|int > 0 }}"
  when:
  - icsp_exists.rc == 1
  - item.enabled | default(true)

- name: Wait until MachineConfigPools are updated
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc get mcp --no-headers {{ item }} | awk '{print $3}'
  register: result
  delay: 10
  retries: 120
  until: result.stdout == "True"
  with_items:
  - master
  - worker
  when: icsp_exists.rc == 1

- name: Obtain node ips for fixing ICSP mirroring
  when: rhacm_icsp_enable_tag_mirror
  block:
  - name: Get node ip addresses
    shell: |
      KUBECONFIG={{ hub_cluster_kubeconfig }} oc get no -o go-template={%raw%}'{{ range .items }}{{ range .status.addresses }}{{ if eq .type "InternalIP" }}{{ printf "%s\n" .address }}{{ end }}{{ end }}{{ end }}'{%endraw%}
    register: all_node_ips

  - name: Get cluster ssh key
    fetch:
      src: /root/.ssh/id_rsa
      dest: "{{ playbook_dir }}/.cluster_key"
      flat: true

  - name: Add worker to inventory via proxy
    add_host:
      name: "[{{ item }}]"
      group: fix_icsp_nodes
      ansible_ssh_private_key_file: "{{ playbook_dir }}/.cluster_key"
      ansible_user: "core"
      ansible_ssh_common_args: |-
        -o ControlMaster=no -o ControlPersist=no -o ProxyCommand='ssh -i {{ playbook_dir }}/.cluster_key -W %h:%p {{ ansible_user }}@{{ inventory_hostname }}'
    with_items: "{{ all_node_ips.stdout_lines }}"
