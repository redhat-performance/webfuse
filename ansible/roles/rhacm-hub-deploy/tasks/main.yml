---
# rhacm-hub-deploy tasks - Install upstream/downstream RHACM hub onto a cluster

- name: Checkout the latest stolostron/deploy repo
  git:
    repo: "{{ rhacm_deploy_repo }}"
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
    force: true
    version: "{{ rhacm_deploy_repo_branch }}"

- name: Create deploy/prereq/pull-secret.yaml
  template:
    src: pull-secret.yaml.j2
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy/prereqs/pull-secret.yaml"

- name: Create snapshot.ver
  copy:
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy/snapshot.ver"
    content: "{{ rhacm_build }}"

- name: Run downstream deployment script
  shell: |
    export KUBECONFIG={{ hub_cluster_kubeconfig }}
    export COMPOSITE_BUNDLE=true
    {% if rhacm_disconnected_registry|length > 1 %}
    export CUSTOM_REGISTRY_REPO="{{ rhacm_disconnected_registry }}/acm-d"
    {% else %}
    export CUSTOM_REGISTRY_REPO="quay.io:443/acm-d"
    {% endif %}
    export DOWNSTREAM=true
    {% if rhacm_disableHubSelfManagement %}
    echo "  disableHubSelfManagement: true" >> {{ rhacm_install_directory }}/rhacm-deploy/deploy/multiclusterhub/example-multiclusterhub-cr.yaml
    {% endif %}
    {{ rhacm_install_directory }}/rhacm-deploy/deploy/start.sh --silent 2>&1 | tee {{ rhacm_install_directory }}/rhacm-deploy/$(date -u +%Y%m%d-%H%M%S)-start.log
  args:
    chdir: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
  when: rhacm_build is search("DOWNSTREAM")

- name: Run upstream deployment script
  shell: |
    export KUBECONFIG={{ hub_cluster_kubeconfig }}
    {{ rhacm_install_directory }}/rhacm-deploy/deploy/start.sh --silent 2>&1 | tee {{ rhacm_install_directory }}/rhacm-deploy/$(date -u +%Y%m%d-%H%M%S)-start.log
  args:
    chdir: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
  when: not rhacm_build is search("DOWNSTREAM")

- name: Wait until MultiClusterHub is running status
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} {%raw%}oc get multiclusterhub -n open-cluster-management multiclusterhub -o go-template='{{ .status.phase }}'{%endraw%}
  register: mch_ready
  until: mch_ready.stdout == "Running"
  retries: 300
  delay: 2

- name: Deploy Topology Aware Lifecycle Operator
  when: setup_talo
  block:
  - name: Create directory for TALO
    file:
      path: "{{ rhacm_install_directory }}/rhacm-deploy/cluster-group-upgrades-operator"
      state: directory

  - name: Clone cluster-group-upgrades-operator (Topology Aware Lifecycle Operator)
    git:
      repo: "{{ talo_repo }}"
      dest: "{{ rhacm_install_directory }}/rhacm-deploy/cluster-group-upgrades-operator"
      force: true
      version: "{{ talo_repo_branch }}"

  - name: Deploy Topology Aware Lifecycle Operator
    shell: |
      cd {{ rhacm_install_directory }}/rhacm-deploy/cluster-group-upgrades-operator
      export KUBECONFIG={{ hub_cluster_kubeconfig }}
      make deploy IMG={{ talo_image }}

- name: Deploy RHACM/ZTP Patches
  when: setup_rhacm_ztp_patches
  block:
  - name: Apply the ArgoCD Deployment kustomization
    shell: |
      KUBECONFIG={{ hub_cluster_kubeconfig }} oc apply -k {{ rhacm_install_directory }}/rhacm-ztp/cnf-features-deploy/ztp/gitops-subscriptions/argocd/deployment

  - name: Apply ArgoCD cnf-features-deploy argocd-openshift-gitops-patch.json
    shell: |
      KUBECONFIG={{ hub_cluster_kubeconfig }} oc patch argocd openshift-gitops -n openshift-gitops --patch-file {{ rhacm_install_directory }}/rhacm-ztp/cnf-features-deploy/ztp/gitops-subscriptions/argocd/deployment/argocd-openshift-gitops-patch.json --type=merge

  - name: Wait for openshift-gitops-repo-server pod running
    shell: |
      KUBECONFIG={{ hub_cluster_kubeconfig }} oc get pods -n openshift-gitops -l app.kubernetes.io/name=openshift-gitops-repo-server -o jsonpath='{.items[0].status.phase}'
    retries: 60
    delay: 2
    register: as_pod
    until: as_pod.stdout == "Running"

  # Although we wait for the new repo-server pod to be running, we can still apply the cluster and policy applications too quickly
  - name: Pause for 15s
    pause:
      seconds: 15

- name: Apply ArgoCD Cluster Applications
  when: setup_ztp_cluster_applications
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc apply -f {{ rhacm_install_directory }}/rhacm-ztp/cnf-features-deploy/ztp/gitops-subscriptions/argocd/cluster-applications/

- name: Apply the ArgoCD Policy Application
  when: setup_ztp_policy_application
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} oc apply -f {{ rhacm_install_directory }}/rhacm-ztp/cnf-features-deploy/ztp/gitops-subscriptions/argocd/policy-applications/common-and-group.yaml
