---
# rhacm-hub-deploy tasks - Install upstream/downstream RHACM hub onto a cluster

- name: Checkout the latest stolostron/deploy repo
  git:
    repo: https://github.com/stolostron/deploy.git
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
    force: true

- name: Create deploy/prereq/pull-secret.yaml
  template:
    src: pull-secret.yaml.j2
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy/prereqs/pull-secret.yaml"

- name: Create snapshot.ver
  copy:
    dest: "{{ rhacm_install_directory }}/rhacm-deploy/deploy/snapshot.ver"
    content: "{{ rhacm_build }}"

- name: Run downstream deployment script
  shell: |
    export KUBECONFIG={{ hub_cluster_kubeconfig }}
    export COMPOSITE_BUNDLE=true
    {% if rhacm_disconnected_registry|length > 1 %}
    export CUSTOM_REGISTRY_REPO="{{ rhacm_disconnected_registry }}/acm-d"
    {% else %}
    export CUSTOM_REGISTRY_REPO="quay.io:443/acm-d"
    {% endif %}
    export DOWNSTREAM=true
    {% if rhacm_disableHubSelfManagement %}
    echo "  disableHubSelfManagement: true" >> {{ rhacm_install_directory }}/rhacm-deploy/deploy/multiclusterhub/example-multiclusterhub-cr.yaml
    {% endif %}
    {{ rhacm_install_directory }}/rhacm-deploy/deploy/start.sh --silent 2>&1 | tee {{ rhacm_install_directory }}/rhacm-deploy/$(date -u +%Y%m%d-%H%M%S)-start.log
  args:
    chdir: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
  when: rhacm_build is search("DOWNSTREAM")

- name: Run upstream deployment script
  shell: |
    export KUBECONFIG={{ hub_cluster_kubeconfig }}
    {{ rhacm_install_directory }}/rhacm-deploy/deploy/start.sh --silent 2>&1 | tee {{ rhacm_install_directory }}/rhacm-deploy/$(date -u +%Y%m%d-%H%M%S)-start.log
  args:
    chdir: "{{ rhacm_install_directory }}/rhacm-deploy/deploy"
  when: not rhacm_build is search("DOWNSTREAM")

- name: Wait until MultiClusterHub is running status
  shell: |
    KUBECONFIG={{ hub_cluster_kubeconfig }} {%raw%}oc get multiclusterhub -n open-cluster-management multiclusterhub -o go-template='{{ .status.phase }}'{%endraw%}
  register: mch_ready
  until: mch_ready.stdout == "Running"
  retries: 300
  delay: 2
